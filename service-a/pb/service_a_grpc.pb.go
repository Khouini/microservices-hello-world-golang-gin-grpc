// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAHelloClient is the client API for ServiceAHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAHelloClient interface {
	SayHello(ctx context.Context, in *ServiceAHelloRequest, opts ...grpc.CallOption) (*ServiceAHelloResponse, error)
}

type serviceAHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAHelloClient(cc grpc.ClientConnInterface) ServiceAHelloClient {
	return &serviceAHelloClient{cc}
}

func (c *serviceAHelloClient) SayHello(ctx context.Context, in *ServiceAHelloRequest, opts ...grpc.CallOption) (*ServiceAHelloResponse, error) {
	out := new(ServiceAHelloResponse)
	err := c.cc.Invoke(ctx, "/servicea.ServiceAHello/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAHelloServer is the server API for ServiceAHello service.
// All implementations must embed UnimplementedServiceAHelloServer
// for forward compatibility
type ServiceAHelloServer interface {
	SayHello(context.Context, *ServiceAHelloRequest) (*ServiceAHelloResponse, error)
	mustEmbedUnimplementedServiceAHelloServer()
}

// UnimplementedServiceAHelloServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAHelloServer struct {
}

func (UnimplementedServiceAHelloServer) SayHello(context.Context, *ServiceAHelloRequest) (*ServiceAHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedServiceAHelloServer) mustEmbedUnimplementedServiceAHelloServer() {}

// UnsafeServiceAHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAHelloServer will
// result in compilation errors.
type UnsafeServiceAHelloServer interface {
	mustEmbedUnimplementedServiceAHelloServer()
}

func RegisterServiceAHelloServer(s grpc.ServiceRegistrar, srv ServiceAHelloServer) {
	s.RegisterService(&ServiceAHello_ServiceDesc, srv)
}

func _ServiceAHello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAHelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicea.ServiceAHello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAHelloServer).SayHello(ctx, req.(*ServiceAHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAHello_ServiceDesc is the grpc.ServiceDesc for ServiceAHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicea.ServiceAHello",
	HandlerType: (*ServiceAHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ServiceAHello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service_a.proto",
}
